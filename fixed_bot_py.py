import logging
import asyncio
import json
import os
from datetime import datetime
from typing import Dict, Any, Optional
from dataclasses import dataclass, asdict
import re

import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MATERIAL_SELECTION, QUANTITY_INPUT, ADDRESS_INPUT, CONTACT_INPUT, CONFIRMATION = range(5)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
class Config:
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º os.getenv() –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'T8323533826:AAFD0HsdzXmP-u8eb8Ge2ieQSNE6SZ-WVGU')
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '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')
    MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID', '5806904086')
    
    # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∑–∞ –º¬≥ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    MATERIAL_PRICES = {
        "–ø–µ—Å–æ–∫": {"price": 1500, "unit": "–º¬≥", "description": "–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π –º—ã—Ç—ã–π"},
        "—â–µ–±–µ–Ω—å": {"price": 2000, "unit": "–º¬≥", "description": "–©–µ–±–µ–Ω—å –≥—Ä–∞–Ω–∏—Ç–Ω—ã–π —Ñ—Ä. 5-20–º–º"},
        "–∑–µ–º–ª—è": {"price": 800, "unit": "–º¬≥", "description": "–ó–µ–º–ª—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ–¥–æ—Ä–æ–¥–Ω–∞—è"},
        "–≥–ª–∏–Ω–∞": {"price": 1200, "unit": "–º¬≥", "description": "–ì–ª–∏–Ω–∞ –¥–ª—è –¥—Ä–µ–Ω–∞–∂–∞"},
        "–ø–µ—Å–æ–∫_–∫–∞—Ä—å–µ—Ä–Ω—ã–π": {"price": 1200, "unit": "–º¬≥", "description": "–ü–µ—Å–æ–∫ –∫–∞—Ä—å–µ—Ä–Ω—ã–π"},
        "—â–µ–±–µ–Ω—å_–∏–∑–≤–µ—Å—Ç–Ω—è–∫–æ–≤—ã–π": {"price": 1800, "unit": "–º¬≥", "description": "–©–µ–±–µ–Ω—å –∏–∑–≤–µ—Å—Ç–Ω—è–∫–æ–≤—ã–π"}
    }

@dataclass
class Order:
    user_id: int
    username: str
    material: str
    quantity: float
    unit: str
    address: str
    phone: str
    estimated_price: float
    created_at: str
    ai_recommendation: str = ""

class AIAssistant:
    def __init__(self, api_key: str):
        if api_key and api_key.startswith('sk-'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API OpenAI
            self.client = openai.OpenAI(api_key=api_key)
            self.enabled = True
        else:
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç.")
            self.enabled = False
        
    async def get_material_recommendation(self, user_query: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ò–ò –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"""
        if not self.enabled:
            return {
                "recommended_material": "–ø–µ—Å–æ–∫",
                "explanation": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                "estimated_quantity": "—É—Ç–æ—á–Ω–∏—Ç—å"
            }
            
        system_prompt = """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. –ü–æ–º–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª.
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:
        - –ø–µ—Å–æ–∫ (–ø–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π –º—ã—Ç—ã–π –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤, –±–µ—Ç–æ–Ω–∞)
        - –ø–µ—Å–æ–∫_–∫–∞—Ä—å–µ—Ä–Ω—ã–π (–ø–µ—Å–æ–∫ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –¥–ª—è –∑–∞—Å—ã–ø–∫–∏, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è)
        - —â–µ–±–µ–Ω—å (—â–µ–±–µ–Ω—å –≥—Ä–∞–Ω–∏—Ç–Ω—ã–π –¥–ª—è –¥—Ä–µ–Ω–∞–∂–∞, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤, –¥–æ—Ä–æ–∂–µ–∫)
        - —â–µ–±–µ–Ω—å_–∏–∑–≤–µ—Å—Ç–Ω—è–∫–æ–≤—ã–π (–±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –¥—Ä–µ–Ω–∞–∂–∞)
        - –∑–µ–º–ª—è (–∑–µ–º–ª—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Å–∞–¥–æ–≤—ã—Ö —Ä–∞–±–æ—Ç, –≥–∞–∑–æ–Ω–æ–≤)
        - –≥–ª–∏–Ω–∞ (–≥–ª–∏–Ω–∞ –¥–ª—è –¥—Ä–µ–Ω–∞–∂–∞, –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏)
        
        –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –†–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –≤ JSON:
        {
            "recommended_material": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–∞—Ç–µ—Ä–∏–∞–ª–∞_–∏–∑_—Å–ø–∏—Å–∫–∞_–≤—ã—à–µ",
            "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤",
            "estimated_quantity": "—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50"
        }
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_query}
                ],
                max_tokens=200,
                temperature=0.7
            )
            
            content = response.choices[0].message.content
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                # –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
                start = content.find('{')
                end = content.rfind('}') + 1
                if start >= 0 and end > start:
                    json_str = content[start:end]
                    result = json.loads(json_str)
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                    if result.get("recommended_material") not in Config.MATERIAL_PRICES:
                        result["recommended_material"] = "–ø–µ—Å–æ–∫"
                    
                    return result
                else:
                    raise json.JSONDecodeError("JSON not found", content, 0)
                    
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                return {
                    "recommended_material": "–ø–µ—Å–æ–∫",
                    "explanation": content[:100] if content else "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Å–æ–∫ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                    "estimated_quantity": "5-10"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
            return {
                "recommended_material": "–ø–µ—Å–æ–∫",
                "explanation": "–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                "estimated_quantity": "—É—Ç–æ—á–Ω–∏—Ç—å"
            }

class ConstructionMaterialsBot:
    def __init__(self):
        self.ai_assistant = AIAssistant(Config.OPENAI_API_KEY)
        self.orders: Dict[int, Order] = {}
        
    def create_material_keyboard(self):
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        keyboard = []
        materials = list(Config.MATERIAL_PRICES.keys())
        
        for i in range(0, len(materials), 2):
            row = []
            for j in range(2):
                if i + j < len(materials):
                    material = materials[i + j]
                    price = Config.MATERIAL_PRICES[material]["price"]
                    row.append(InlineKeyboardButton(
                        f"{Config.MATERIAL_PRICES[material]['description']} - {price}‚ÇΩ/–º¬≥",
                        callback_data=f"material_{material}"
                    ))
            keyboard.append(row)
            
        if self.ai_assistant.enabled:
            keyboard.append([InlineKeyboardButton("ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ò–ò", callback_data="ai_help")])
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")])
        
        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ  
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
        """
        
        keyboard = [
            [KeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton("üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã"), KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        ]
        
        if self.ai_assistant.enabled:
            keyboard.append([KeyboardButton("ü§ñ –ü–æ–º–æ—â—å –ò–ò –≤ –≤—ã–±–æ—Ä–µ")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
        return ConversationHandler.END

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if "–∑–∞–∫–∞–∑–∞—Ç—å" in text or "–º–∞—Ç–µ—Ä–∏–∞–ª" in text:
            return await self.start_order(update, context)
        elif "—Ü–µ–Ω" in text:
            return await self.show_prices(update, context)
        elif "–∫–æ–Ω—Ç–∞–∫—Ç" in text:
            return await self.show_contacts(update, context)
        elif "–ø–æ–º–æ—â—å" in text or "–≤—ã–±–æ—Ä" in text or "–∏–∏" in text:
            return await self.ai_consultation(update, context)
        else:
            # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ò–ò (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if self.ai_assistant.enabled:
                return await self.ai_consultation(update, context)
            else:
                await update.message.reply_text(
                    "–ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
                )
                return ConversationHandler.END

    async def start_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞"""
        await update.message.reply_text(
            "üõí –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:",
            reply_markup=self.create_material_keyboard()
        )
        return MATERIAL_SELECTION

    async def show_prices(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"""
        price_text = "üí∞ **–ü–†–ê–ô–°-–õ–ò–°–¢**\n\n"
        
        for material, info in Config.MATERIAL_PRICES.items():
            price_text += f"‚Ä¢ {info['description']}\n"
            price_text += f"  üíµ {info['price']}‚ÇΩ –∑–∞ {info['unit']}\n\n"
            
        price_text += "üìç *–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏*\n"
        price_text += "üöö *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ*"
        
        await update.message.reply_text(price_text, parse_mode='Markdown')

    async def show_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        contact_text = """
üìû **–ö–û–ù–¢–ê–ö–¢–´**

‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìß Email: info@materials.ru
üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 8:00-18:00, –°–± 9:00-15:00

üìç –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, 1

üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –∏ –æ–±–ª–∞—Å—Ç–∏
‚ö° –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
        """
        await update.message.reply_text(contact_text, parse_mode='Markdown')

    async def ai_consultation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ò–ò"""
        if not self.ai_assistant.enabled:
            await update.message.reply_text(
                "ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!"
            )
            return ConversationHandler.END
            
        user_query = update.message.text
        
        await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        recommendation = await self.ai_assistant.get_material_recommendation(user_query)
        
        material_info = Config.MATERIAL_PRICES.get(recommendation['recommended_material'], 
                                                   Config.MATERIAL_PRICES['–ø–µ—Å–æ–∫'])
        
        response_text = f"""
ü§ñ **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ò–ò**

üì¶ **–ú–∞—Ç–µ—Ä–∏–∞–ª:** {material_info['description']}
üí∞ **–¶–µ–Ω–∞:** {material_info['price']}‚ÇΩ/{material_info['unit']}

üí° **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {recommendation['explanation']}

üìè **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {recommendation['estimated_quantity']} {material_info['unit']}

–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{recommendation['recommended_material']}")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="show_materials")],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")]
        ]
        
        await update.message.reply_text(
            response_text, 
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return MATERIAL_SELECTION

    async def handle_material_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "ai_help":
            await query.edit_message_text(
                "ü§ñ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –¥–æ–º–∞ 10—Ö12 –º–µ—Ç—Ä–æ–≤' –∏–ª–∏ "
                "'–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –¥—Ä–µ–Ω–∞–∂ —É—á–∞—Å—Ç–∫–∞'"
            )
            return MATERIAL_SELECTION
            
        elif query.data == "contact_manager":
            manager_text = """
üë®‚Äçüíº **–°–í–Ø–ó–¨ –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú**

üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìß Email: manager@materials.ru
üí¨ Telegram: @materials_manager

üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 8:00-18:00

–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–º–æ–∂–µ—Ç —Å:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚Ä¢ –†–∞—Å—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –°—Ä–æ—á–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
            """
            await query.edit_message_text(manager_text, parse_mode='Markdown')
            return ConversationHandler.END
            
        elif query.data.startswith("material_") or query.data.startswith("order_"):
            material = query.data.split("_", 1)[1]
            
            if material in Config.MATERIAL_PRICES:
                context.user_data['selected_material'] = material
                material_info = Config.MATERIAL_PRICES[material]
                
                await query.edit_message_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω: {material_info['description']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {material_info['price']}‚ÇΩ –∑–∞ {material_info['unit']}\n\n"
                    f"üìè –£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {material_info['unit']}:"
                )
                return QUANTITY_INPUT
                
        elif query.data == "show_materials":
            await query.edit_message_text(
                "üõí –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:",
                reply_markup=self.create_material_keyboard()
            )
            return MATERIAL_SELECTION

    async def handle_quantity_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            quantity = float(re.sub(r'[^\d.,]', '', update.message.text.replace(',', '.')))
            
            if quantity <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return QUANTITY_INPUT
                
            if quantity > 1000:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
                return QUANTITY_INPUT
                
            context.user_data['quantity'] = quantity
            
            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            material = context.user_data['selected_material']
            price_per_unit = Config.MATERIAL_PRICES[material]['price']
            total_price = quantity * price_per_unit
            
            context.user_data['estimated_price'] = total_price
            
            await update.message.reply_text(
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} {Config.MATERIAL_PRICES[material]['unit']}\n"
                f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:,.0f}‚ÇΩ (–±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)\n\n"
                f"üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
            )
            return ADDRESS_INPUT
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 10.5):"
            )
            return QUANTITY_INPUT

    async def handle_address_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
        address = update.message.text.strip()
        
        if len(address) < 10:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                "(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º):"
            )
            return ADDRESS_INPUT
            
        context.user_data['address'] = address
        
        await update.message.reply_text(
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
            f"üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
        )
        return CONTACT_INPUT

    async def handle_contact_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        phone = update.message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_pattern = re.compile(r'[\+]?[0-9\s\-\(\)]{10,}')
        if not phone_pattern.match(phone):
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67 –∏–ª–∏ 8 999 123 45 67):"
            )
            return CONTACT_INPUT
            
        context.user_data['phone'] = phone
        
        # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
        order = Order(
            user_id=update.effective_user.id,
            username=update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
            material=context.user_data['selected_material'],
            quantity=context.user_data['quantity'],
            unit=Config.MATERIAL_PRICES[context.user_data['selected_material']]['unit'],
            address=context.user_data['address'],
            phone=phone,
            estimated_price=context.user_data['estimated_price'],
            created_at=datetime.now().strftime("%d.%m.%Y %H:%M")
        )
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        material_info = Config.MATERIAL_PRICES[order.material]
        confirmation_text = f"""
üìã **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê**

üë§ –ó–∞–∫–∞–∑—á–∏–∫: @{order.username}
üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material_info['description']}
üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity} {order.unit}
üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.estimated_price:,.0f}‚ÇΩ
üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.address}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}

‚ö†Ô∏è *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏*

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
        ]
        
        self.orders[update.effective_user.id] = order
        
        await update.message.reply_text(
            confirmation_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return CONFIRMATION

    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        if query.data == "confirm_order" and user_id in self.orders:
            order = self.orders[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await self.send_order_to_manager(order, context.application)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            order_number = str(order.user_id) + str(int(datetime.now().timestamp()))[-6:]
            
            # –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
            await query.edit_message_text(
                "‚úÖ **–ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢!**\n\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_number}\n\n"
                "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
                "‚è∞ –û–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè",
                parse_mode='Markdown'
            )
            
            # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            del self.orders[user_id]
            context.user_data.clear()
            
        elif query.data == "cancel_order":
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
            if user_id in self.orders:
                del self.orders[user_id]
            context.user_data.clear()
            
        return ConversationHandler.END

    async def send_order_to_manager(self, order: Order, application):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
        try:
            material_info = Config.MATERIAL_PRICES[order.material]
            order_number = str(order.user_id) + str(int(datetime.now().timestamp()))[-6:]
            
            manager_message = f"""
üîî **–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_number}**

üë§ **–ö–ª–∏–µ–Ω—Ç:** @{order.username} (ID: {order.user_id})
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {order.phone}
üìÖ **–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:** {order.created_at}

üì¶ **–ú–∞—Ç–µ—Ä–∏–∞–ª:** {material_info['description']}
üìè **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {order.quantity} {order.unit}
üí∞ **–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {order.estimated_price:,.0f}‚ÇΩ

üìç **–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:**
{order.address}

‚ö° **–¢–†–ï–ë–£–ï–¢–°–Ø –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ö–õ–ò–ï–ù–¢–û–ú!**
            """
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MANAGER_CHAT_ID)
            if Config.MANAGER_CHAT_ID:
                try:
                    await application.bot.send_message(
                        chat_id=Config.MANAGER_CHAT_ID,
                        text=manager_message,
                        parse_mode='Markdown'
                    )
                    logger.info(f"–ó–∞–∫–∞–∑ #{order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
            else:
                logger.warning("MANAGER_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–∫–∞–∑ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not Config.TELEGRAM_BOT_TOKEN or Config.TELEGRAM_BOT_TOKEN == 'your_bot_token_here':
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = ConstructionMaterialsBot()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", bot.start),
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_message)
            ],
            states={
                MATERIAL_SELECTION: [
                    CallbackQueryHandler(bot.handle_material_selection),
                    MessageHandler(filters.TEXT, bot.ai_consultation)
                ],
                QUANTITY_INPUT: [MessageHandler(filters.TEXT, bot.handle_quantity_input)],
                ADDRESS_INPUT: [MessageHandler(filters.TEXT, bot.handle_address_input)],
                CONTACT_INPUT: [MessageHandler(filters.TEXT, bot.handle_contact_input)],
                CONFIRMATION: [CallbackQueryHandler(bot.handle_confirmation)]
            },
            fallbacks=[CommandHandler("start", bot.start)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(conv_handler)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"OpenAI API: {'–≤–∫–ª—é—á–µ–Ω' if bot.ai_assistant.enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        logger.info(f"Manager Chat ID: {Config.MANAGER_CHAT_ID}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()
